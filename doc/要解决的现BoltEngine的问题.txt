
1.对于“模板”，资源,xar包等应用层逻辑都是在使用中慢慢总结出来的，可以有一个更好的整理式回顾

2.没有很好的支持"样式表"，样式表是一种能更快速的给一些符“条件”的对象"设置属性"的方法.
现在可以直接使用h5的css设施，如何更好的应用样式表？

4.像web一样"互联网"。当年为了保持一个精悍的核心和快速实现，回避了这个问题。实践证明这个问题应该在一开始就考虑(几种核心资源：绘制资源，模板，样式表，代码的异步加载。当这几种东西的获取可以异步的时候，如何定义新的非完整性状态的问题)
现在基于h5,可以直接使用这些设施，但要仔细考虑取舍，并选择一个合适的范式
http异步加载很讨厌的一点是不稳定性，因为html对所有的东西都是平等的，并且会边加载边展示。这对阅读性是好的，但对交互是灾难
如何实现更可控的异步加载

5.自动Resize(排版) 
原有的Resize逻辑简单，但有些常见的需求都不好满足：比如根据“内容”的大小调整对象的大小
目前Resize逻辑 一个对象在没上树前，不会触发任何事件
在上树后，会按从 父-》子的顺序开始计算AbsPos(一种cache),同时给了很多对象重新计算自己的位置表达式的机会，由于位置表达式只依赖自己和父亲，与事件的触发顺序一致，这样计算是没有歧义的。  
onsize事件通常会获取child,并重新设施child的位置，这个顺序会有问题？

使用h5后,html有大量和排版有关的设施可以用，这里的问题在于：要用哪些部分？

7.支持real+dpi的物理坐标系( 内部还是用基于px的坐标系) 使用者配置的问题

8.对Control的孩子区分逻辑孩子和普通孩子，逻辑孩子才会算入Control的名字空间
有了上述分别之后多了SetControlChildrenVisible, enable...也受影响
在h5里如果使用getElementByID这套，命名空间的问题更严重

9.梳理对象从xml里加载->加到树上的事件与处理逻辑。兼顾易用性和性能

10.对xar概念重新抽象，以及由此构建的app

11 动画的状态

start->working->end
如果isLoop,那么在end后会自动回到start （end一样有事件，可以用来控制isLoop）
任何状态下 调用End()会直接进入本轮播放的最后状态，如果loop,动画不会结束
任何状态下 调用Pause后会进入stop状态,再resume会从上次stop的地方恢复运行
任何状态下 调用Finish 会让动画进入Finsih状态,此时动画结束

动画继承: 方便创建步调一致的动画
这里可以使用h5的一些成熟设施

13 TextureObject与FillObject结合(学习Android的设计)

14 nametable应该是classloader(或typeloader)的实现

15.TextObject能够提供基于矢量的缩放，让font反过来去适应TextObject的布局大小

16.位置改变动画对对象的位置表达式的破坏问题